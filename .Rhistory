points(pelt@cpts, y=rep(40,length(pelt@cpts)),pch=16, col="navy",cex=1.5)
points(segNeigh@cpts, y=rep(35,length(segNeigh@cpts)),pch=16, col="peru",cex=1.5)
legend("bottomright", legend = c('MSCP','WBS','PELT','SegNeigh'),
col = c("purple","darkgreen","navy","peru"), pch=16,cex=0.4)
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
library(mosum)
setwd("C:/Users/keshn/Desktop/MOSUM-Procedure")
source("jcp/R/jcp.r")
source("jcp/R/plot.jcp.r")
source("jcp/R/summary.jcp.r")
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
knitr::opts_chunk$set(echo = TRUE)
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
library(mosum)
library(changepoint)
td <-  testData(lengths = c(150,190,50,90), means = c(4,4,1,1),sds = c(1,2,2,4),seed = 333)
X = td$x
mosum = multiscale.localPrune(changeData(X,multiscale.localPrune(X,var.est.method="mosum.min",alpha=0.05)$cpts))$cpts
PELT=cpt.var(X,method="PELT")
BinSEg=cpt.var(X,method="BinSeg")
Joint=jcp(td$x)
Joint$changepoints
Joint$mean_s
#png(filename="fig6.2.png")
plot(X, type="l", main="Variance Change Point Estimators", xlab="Time",ylab="",lwd=1.2)
abline(v=c(150,390),col="red",lwd=1.5)
abline(v=c(340),col="red",lty=2,lwd=1.5)
points(x=mosum,y=c(4,4),col="turquoise4",pch=16,cex=1.75)
points(x=PELT@cpts,y=c(8,8,8), col="olivedrab", pch=16,cex=1.75)
points(x=BinSEg@cpts,y=c(10,10,10),col="slategray",pch=16,cex=1.75)
points(x=Joint$changepoints,y=c(6,6),col="royalblue",pch=16,cex=1.75)
legend("bottomleft",
legend = c('AdjData','PELT','BinSeg','jcp'),
col = c("turquoise4","olivedrab","slategray","royalblue"),
pch = 16,
cex = 1.2)
#dev.off()
library(mosum)
source("jcp/R/jcp.r")
source("jcp/R/plot.jcp.r")
source("jcp/R/summary.jcp.r")
library(changepoint)
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
td <-  testData(lengths = c(150,190,50,90), means = c(4,4,1,1),sds = c(1,2,2,4),seed = 333)
X = td$x
mosum = multiscale.localPrune(changeData(X,multiscale.localPrune(X,var.est.method="mosum.max",alpha=0.05)$cpts))$cpts
PELT=cpt.var(X,method="PELT")
BinSEg=cpt.var(X,method="BinSeg")
Joint=jcp(td$x)
plot(mosum,xlab="Time", type="l",display="data", shaded="none")
abline(v = mosum$cpts,col="red")
library(mosum)
source("jcp/R/jcp.r")
source("jcp/R/plot.jcp.r")
source("jcp/R/summary.jcp.r")
library(changepoint)
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
td <-  testData(lengths = c(150,190,50,90), means = c(4,4,1,1),sds = c(1,2,2,4),seed = 333)
X = td$x
mosum = multiscale.localPrune(changeData(X,multiscale.localPrune(X,var.est.method="mosum.max",alpha=0.05)$cpts))$cpts
PELT=cpt.var(X,method="PELT")
BinSEg=cpt.var(X,method="BinSeg")
Joint=jcp(td$x)
plot(X, type="l", main="Variance Change Point Estimators", xlab="Time",ylab="",lwd=1.2)
abline(v=c(150,390),col="red",lwd=1.5)
abline(v=c(340),col="red",lty=2,lwd=1.5)
points(x=mosum,y=c(4,4),col="turquoise4",pch=16,cex=1.75)
points(x=PELT@cpts,y=c(8,8,8), col="olivedrab", pch=16,cex=1.75)
points(x=BinSEg@cpts,y=c(10,10,10),col="slategray",pch=16,cex=1.75)
points(x=Joint$changepoints,y=c(6,6),col="royalblue",pch=16,cex=1.75)
legend("bottomleft",
legend = c('AdjData','PELT','BinSeg','jcp'),
col = c("turquoise4","olivedrab","slategray","royalblue"),
pch = 16,
cex = 1.2)
legend("bottomleft",
legend = c('AdjData','PELT','BinSeg','jcp'),
col = c("turquoise4","olivedrab","slategray","royalblue"),
pch = 16,
cex = 1)
library(mosum)
source("jcp/R/jcp.r")
source("jcp/R/plot.jcp.r")
source("jcp/R/summary.jcp.r")
library(changepoint)
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
td <-  testData(lengths = c(150,190,50,90), means = c(4,4,1,1),sds = c(1,2,2,4),seed = 333)
X = td$x
mosum = multiscale.localPrune(changeData(X,multiscale.localPrune(X,var.est.method="mosum.max",alpha=0.05)$cpts))$cpts
PELT=cpt.var(X,method="PELT")
BinSEg=cpt.var(X,method="BinSeg")
Joint=jcp(td$x)
plot(X, type="l", main="Variance Change Point Estimators", xlab="Time",ylab="",lwd=1.2)
abline(v=c(150,390),col="red",lwd=1.5)
abline(v=c(340),col="red",lty=2,lwd=1.5)
points(x=mosum,y=c(4,4),col="turquoise4",pch=16,cex=1.75)
points(x=PELT@cpts,y=c(8,8,8), col="olivedrab", pch=16,cex=1.75)
points(x=BinSEg@cpts,y=c(10,10,10),col="slategray",pch=16,cex=1.75)
points(x=Joint$changepoints,y=c(6,6),col="royalblue",pch=16,cex=1.75)
legend("bottomleft",
legend = c('AdjData','PELT','BinSeg','jcp'),
col = c("turquoise4","olivedrab","slategray","royalblue"),
pch = 16,
cex = 1)
library(mosum)
source("jcp/R/jcp.r")
source("jcp/R/plot.jcp.r")
source("jcp/R/summary.jcp.r")
library(changepoint)
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
td <-  testData(lengths = c(150,190,50,90), means = c(4,4,1,1),sds = c(1,2,2,4),seed = 333)
X = td$x
mosum = multiscale.localPrune(changeData(X,multiscale.localPrune(X,var.est.method="mosum.max",alpha=0.05)$cpts))$cpts
PELT=cpt.var(X,method="PELT")
BinSEg=cpt.var(X,method="BinSeg")
Joint=jcp(td$x)
plot(X, type="l", main="Variance Change Point Estimators", xlab="Time",ylab="",lwd=1.2)
abline(v=c(150,390),col="red",lwd=1.5)
abline(v=c(340),col="red",lty=2,lwd=1.5)
points(x=mosum,y=c(4,4),col="turquoise4",pch=16,cex=1.75)
points(x=PELT@cpts,y=c(8,8,8), col="olivedrab", pch=16,cex=1.75)
points(x=BinSEg@cpts,y=c(10,10,10),col="slategray",pch=16,cex=1.75)
points(x=Joint$changepoints,y=c(6,6),col="royalblue",pch=16,cex=1.75)
legend("bottomleft",
legend = c('AdjData','PELT','BinSeg','jcp'),
col = c("turquoise4","olivedrab","slategray","royalblue"),
pch = 16,
cex = .9)
library(mosum)
source("jcp/R/jcp.r")
source("jcp/R/plot.jcp.r")
source("jcp/R/summary.jcp.r")
library(changepoint)
changeData = function(data, cpts){
N=length(data)
num = length(cpts)
newData=c()
if (num== 0){
currMean=mean(data)
newData=c(newData, (data-currMean)^2)}
else
{for (x in 1:num){
if (x!=1){
#n= cpts[x]-1
currentData = data[cpts[x-1]:(cpts[x]-1)]
currMean=mean(currentData)
newData=c(newData, (currentData-currMean)^2)
}
else{
currentData= data[1:(cpts[1]-1)]
currMean=mean(currentData)
newData=c(newData,(currentData-currMean)^2)
}
}
currentData = data[cpts[num]:N]
currMean = mean(currentData)
newData = c(newData,(currentData-currMean)^2)}
return (log(newData))
}
td <-  testData(lengths = c(150,190,50,90), means = c(4,4,1,1),sds = c(1,2,2,4),seed = 333)
X = td$x
mosum = multiscale.localPrune(changeData(X,multiscale.localPrune(X,var.est.method="mosum.max",alpha=0.05)$cpts))$cpts
PELT=cpt.var(X,method="PELT")
BinSEg=cpt.var(X,method="BinSeg")
Joint=jcp(td$x)
plot(X, type="l", main="Variance Change Point Estimators", xlab="Time",ylab="",lwd=1.2)
abline(v=c(150,390),col="red",lwd=1.5)
abline(v=c(340),col="red",lty=2,lwd=1.5)
points(x=mosum,y=c(4,4),col="turquoise4",pch=16,cex=1.75)
points(x=PELT@cpts,y=c(8,8,8), col="olivedrab", pch=16,cex=1.75)
points(x=BinSEg@cpts,y=c(10,10,10),col="slategray",pch=16,cex=1.75)
points(x=Joint$changepoints,y=c(6,6),col="royalblue",pch=16,cex=1.75)
legend("bottomleft",
legend = c('AdjData','PELT','BinSeg','jcp'),
col = c("turquoise4","olivedrab","slategray","royalblue"),
pch = 16,
cex = .6)
knitr::opts_chunk$set(echo = TRUE)
source("C:/Users/keshn/Desktop/Diss/jcp/R/jcp.r")
source("C:/Users/keshn/Desktop/Diss/jcp/R/plot.jcp.r")
source("C:/Users/keshn/Desktop/Diss/jcp/R/summary.jcp.r")
library(mosum)
library(changepoint)
td <-  testData(lengths = c(200, 60, 240, 100, 110),means=c(-2,3,8,8,8),sds=c(6, 6, 2, 1, 4))
change=c(200,260,500,600)
X = td$x
z=jcp(X)
z$changepoints
print(GetDiff(z$changepoints,change))
set.seed(111)
m = rep(0,3)
j= rep(0,3)
p = rep(0,3)
b = rep(0,3)
mt=0
jt=0
pt=0
bt=0
for (x in 1:500){
td = testData(lengths = c(200, 60, 240, 100, 110),means=c(-2,3,8,8,8),sds=c(6, 6, 2, 1, 4))
change=c(200,260,500,600)
X = td$x
z=jcp(X)
z$changepoints
j = j+ (GetDiff(z$changepoints,change))
jt = jt + length(z$changepoints)
momu= multiscale.localPrune(X,var.est.method="mosum.min",alpha=0.05)
mosd = multiscale.localPrune(changeData(X,momu$cpts),var.est.method="mosum",alpha=0.05)
mocom = combine(mosd$cpts,momu$cpts)
m = m+ GetDiff(mocom,change)
mt=mt +length(mocom)
pelt = cpt.meanvar(X,method="PELT",pen.value = 0.05)
pe=RemoveDup(pelt@cpts)
p = p + GetDiff(pe,change)
pt = pt+ length(pe)
bin = cpt.meanvar(X,method="BinSeg",pen.value = 0.05)
#be = bin@cpts[-length(bin@cpts)]
bi = RemoveDup(bin@cpts)
b =b+GetDiff(bi,change)
bt = bt + length(bi)
}
knitr::opts_chunk$set(echo = TRUE)
source("C:/Users/keshn/Desktop/Diss/jcp/R/jcp.r")
source("C:/Users/keshn/Desktop/Diss/jcp/R/plot.jcp.r")
source("C:/Users/keshn/Desktop/Diss/jcp/R/summary.jcp.r")
library(mosum)
library(changepoint)
td <-  testData(lengths = c(200, 60, 240, 100, 110),means=c(-2,3,8,8,8),sds=c(6, 6, 2, 1, 4))
change=c(200,260,500,600)
X = td$x
z=jcp(X)
z$changepoints
print(GetDiff(z$changepoints,change))
combine <- function(array1, array2, min_diff = 30) {
# Combine and sort the two arrays
combined_array <- sort(c(array1, array2))
# Initialize the result array with the first element
result <- combined_array[1]
# Loop through the combined array to check the difference between elements
for (i in 2:length(combined_array)) {
if (combined_array[i] - result[length(result)] >= min_diff) {
result <- c(result, combined_array[i])
}
}
return(result)
}
GetDiff = function(array1,array2){
D=rep(0,3)
for (i in 1:length(array1)){
for (n in 1: length(array2)){
test= abs(array1[i]-array2[n])
if (test<6){D[1]=D[1]+1}
if((test>5)& (test<11)){D[2] = D[2]+1}
if ((test>10)& (test)<26){D[3]=D[3]+1}
}
}
return (D)
}
set.seed(111)
m = rep(0,3)
j= rep(0,3)
p = rep(0,3)
b = rep(0,3)
mt=0
jt=0
pt=0
bt=0
for (x in 1:500){
td = testData(lengths = c(200, 60, 240, 100, 110),means=c(-2,3,8,8,8),sds=c(6, 6, 2, 1, 4))
change=c(200,260,500,600)
X = td$x
z=jcp(X)
z$changepoints
j = j+ (GetDiff(z$changepoints,change))
jt = jt + length(z$changepoints)
momu= multiscale.localPrune(X,var.est.method="mosum.min",alpha=0.05)
mosd = multiscale.localPrune(changeData(X,momu$cpts),var.est.method="mosum",alpha=0.05)
mocom = combine(mosd$cpts,momu$cpts)
m = m+ GetDiff(mocom,change)
mt=mt +length(mocom)
pelt = cpt.meanvar(X,method="PELT",pen.value = 0.05)
pe=RemoveDup(pelt@cpts)
p = p + GetDiff(pe,change)
pt = pt+ length(pe)
bin = cpt.meanvar(X,method="BinSeg",pen.value = 0.05)
#be = bin@cpts[-length(bin@cpts)]
bi = RemoveDup(bin@cpts)
b =b+GetDiff(bi,change)
bt = bt + length(bi)
}
RemoveDup = function(arr){
arr <- sort(arr)
# Loop through the array in reverse order to avoid issues when modifying it in-place
i <- 2
while (i <= length(arr)) {
# Check if the current item is within 10 units of the previous one
if (abs(arr[i] - arr[i - 1]) <= 30) {
arr <- arr[-i]  # Remove the current item from the array
} else {
i <- i + 1  # Otherwise, move to the next item
}
}
return(arr)
}
print(RemoveDup(c(10,15,20,5,50)))
set.seed(111)
m = rep(0,3)
j= rep(0,3)
p = rep(0,3)
b = rep(0,3)
mt=0
jt=0
pt=0
bt=0
for (x in 1:500){
td = testData(lengths = c(200, 60, 240, 100, 110),means=c(-2,3,8,8,8),sds=c(6, 6, 2, 1, 4))
change=c(200,260,500,600)
X = td$x
z=jcp(X)
z$changepoints
j = j+ (GetDiff(z$changepoints,change))
jt = jt + length(z$changepoints)
momu= multiscale.localPrune(X,var.est.method="mosum.min",alpha=0.05)
mosd = multiscale.localPrune(changeData(X,momu$cpts),var.est.method="mosum",alpha=0.05)
mocom = combine(mosd$cpts,momu$cpts)
m = m+ GetDiff(mocom,change)
mt=mt +length(mocom)
pelt = cpt.meanvar(X,method="PELT",pen.value = 0.05)
pe=RemoveDup(pelt@cpts)
p = p + GetDiff(pe,change)
pt = pt+ length(pe)
bin = cpt.meanvar(X,method="BinSeg",pen.value = 0.05)
#be = bin@cpts[-length(bin@cpts)]
bi = RemoveDup(bin@cpts)
b =b+GetDiff(bi,change)
bt = bt + length(bi)
}
